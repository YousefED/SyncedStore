"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[686],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,y=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5887:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2,sidebar_label:"Example"},i="Plain javascript example",s={unversionedId:"basics/example",id:"basics/example",title:"Plain javascript example",description:"Let's explore how SyncedStore works using a vanilla Javascript example. It's good to understand the basics, although you might want to skip ahead immediately to the React or Vue examples.",source:"@site/docs/basics/example.md",sourceDirName:"basics",slug:"/basics/example",permalink:"/docs/basics/example",draft:!1,editUrl:"https://github.com/yousefed/SyncedStore/edit/main/docs/docs/basics/example.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Example"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/basics/installation"},next:{title:"React",permalink:"/docs/react"}},p={},l=[],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"plain-javascript-example"},"Plain javascript example"),(0,r.kt)("p",null,"Let's explore how ",(0,r.kt)("em",{parentName:"p"},"SyncedStore")," works using a vanilla Javascript example. It's good to understand the basics, although you might want to skip ahead immediately to the ",(0,r.kt)("a",{parentName:"p",href:"../react"},"React")," or ",(0,r.kt)("a",{parentName:"p",href:"../vue"},"Vue")," examples."),(0,r.kt)("p",null,"In the example below, we create a SyncedStore ",(0,r.kt)("em",{parentName:"p"},"store")," with two properties: an array ",(0,r.kt)("inlineCode",{parentName:"p"},"myArray")," and an object ",(0,r.kt)("inlineCode",{parentName:"p"},"myObject"),". These are defined in ",(0,r.kt)("em",{parentName:"p"},"store.js"),". The example then demonstrates how you can add some (random) values to the array ",(0,r.kt)("inlineCode",{parentName:"p"},"myArray")," (by clicking the first button), or how you can set a property on ",(0,r.kt)("inlineCode",{parentName:"p"},"myObject")," (click the second button)."),(0,r.kt)("p",null,"In the code, you can see that adding a value to an array that is shared across users is as simple as calling ",(0,r.kt)("inlineCode",{parentName:"p"},'store.myArray.push({ property: "value" });'),". And changing / adding a propery is done like a regular property assignment: ",(0,r.kt)("inlineCode",{parentName:"p"},'store.myObject.property = "value";'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"live plain",live:!0,plain:!0},'import { observeDeep } from "@syncedstore/core";\nimport { store } from "./store";\n\nconst root = document.getElementById("app");\n\n// Display the contents of the store\nconst jsonView = document.createElement("pre");\njsonView.innerText = JSON.stringify(store, undefined, 2);\nroot.appendChild(jsonView);\n\n// Add a button to add some values to store.myArray\nconst addElementBtn = document.createElement("button");\naddElementBtn.innerText = "Add values to array";\naddElementBtn.onclick = () => {\n  // Add an object to the array\n  store.myArray.push({ property: "value" });\n\n  // Add a random number between 0 and 100 to the array\n  store.myArray.push(Math.floor(Math.random() * 100));\n};\nroot.appendChild(addElementBtn);\n\n// Add a button to set a property on store.myObject\n\n// Which property to change?\nconst inputPropertyName = document.createElement("input");\ninputPropertyName.value = "myProp";\nroot.appendChild(inputPropertyName);\n\n// What value to set to the property?\nconst inputPropertyValue = document.createElement("input");\ninputPropertyValue.value = "myValue";\nroot.appendChild(inputPropertyValue);\n\n// Add the actual button to change a property\nconst setPropertBtn = document.createElement("button");\nsetPropertBtn.innerText = "Change a property on the object";\nsetPropertBtn.onclick = () => {\n  // Change a property on myObject\n  store.myObject[inputPropertyName.value] = inputPropertyValue.value;\n};\nroot.appendChild(setPropertBtn);\n\n// Automatically update jsonView when the store changes\n//\n// (note that in most applications, you won\'t use observeDeep\n// but rely on SyncedStore\'s reactive updating mechanism instead)\nobserveDeep(store, () => {\n  jsonView.innerText = JSON.stringify(store, undefined, 2);\n});\n\n// Set the store on the window object\n// If you like, you can now play around with the store\n// and change values using the Browser inspector\nwindow.store = store;\n')),(0,r.kt)("p",null),(0,r.kt)("admonition",{title:"Tip: Working with the live examples",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'Throughout the documentation, you\'ll find live examples that you can edit.\nThe results of the code are displayed twice (side-by-side) and can be seen as two different "users" using your app.'),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Simulating offline behaviour")),(0,r.kt)("p",{parentName:"admonition"},"You can set one side to ",(0,r.kt)("em",{parentName:"p"},"offline"),", which simulates an offline user. You can then make changes (on that side or the other side), and set the user to ",(0,r.kt)("em",{parentName:"p"},"online")," again. This way, you can experience how changes are synced when users make simultaneous edits to the store."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Inspecting the store")),(0,r.kt)("p",{parentName:"admonition"},"Use the ",(0,r.kt)("em",{parentName:"p"},"Inspect")," button to inspect the current value of the store and see how the store updates while you make changes."),(0,r.kt)("small",null,"Note: the example above uses Javascript, most of the other examples on this website are written in Typescript")))}u.isMDXComponent=!0}}]);